
-- Crear tablas de transformaciones y limpieza de datos
CREATE TABLE EVENT (
    EVENT_ID NUMBER(38,0),
    START_DATE DATE,
    END_DATE DATE,
    NATION VARCHAR(25),
    EVENT_NAME VARCHAR(40),
    PRIMARY KEY (EVENT_ID)
);

CREATE TABLE ENTREGA (
    ID_PLAZO_ENTREGA INTEGER,
    DESCRIPCION VARCHAR(150),
    PRIMARY KEY (ID_PLAZO_ENTREGA)
);

CREATE TABLE STORE (
    STORE_ID NUMBER(38,0),
    NATION VARCHAR(25),
    PRIMARY KEY (STORE_ID)
);

CREATE TABLE EXCHANGE_RATE (
    NATION VARCHAR(25),
    ORDER_DATE DATE,
    EXCHANGE_USD DECIMAL(38,2),
    PRIMARY KEY (NATION, ORDER_DATE)
);

CREATE TABLE TIME_ZONE (
    NATION VARCHAR(25),
    UTC TIMESTAMP_TZ,
    LOCAL_DATETIME TIMESTAMP_TZ,
    PRIMARY KEY (NATION)
);

CREATE TABLE DAILY_SALES (
    ORDER_DATE DATE,
    CUSTKEY NUMBER(38,0),
    PARTKEY NUMBER(38,0),
    SUPPKEY NUMBER(38,0),
    ORDERKEY NUMBER(38,0),
    ORDERTYPE DATE,
    STORE_ID NUMBER(38,0),
    EVENT_ID NUMBER(38,0),
    LOCAL_PRICE NUMBER(38,2),
    CUSTOMER_PRICE NUMBER(38,2),
    LOCAL_DATETIME TIMESTAMP_TZ,
    CUSTOMER_DATETIME TIMESTAMP_TZ,
    ID_PLAZO_ENTREGA NUMBER(38,0),
    TAX NUMBER(12,2),
    QUANTITY NUMBER(12,2),
    LINESTATUS VARCHAR(1),
    ORDER_STATUS VARCHAR(1),
    ORDER_PRIORITY VARCHAR(15),
    SHIP_DATE DATE,
    RETURN_FLAG VARCHAR(1),
    COMMIT_DATE DATE,
    RECEIPT_DATE DATE,
    PRIMARY KEY (ORDER_DATE, ORDERKEY, PARTKEY, SUPPKEY)
);

-- Crear Task para transformar y limpiar datos
CREATE OR REPLACE TASK transform_clean_data_task
    WAREHOUSE = 'COMPUTE_WH'
    SCHEDULE = '60 MINUTE'
    SUSPEND_TASK_AFTER_NUM_FAILURES = 3
AS
BEGIN
    -- Limpiar datos de DAILY_SALES usando OCLERK para mantener solo datos numéricos
    -- Insertar datos en la tabla temporal TEMP_DAILY_SALES con datos numéricos
    CREATE OR REPLACE TEMPORARY TABLE TEMP_DAILY_SALES AS
    SELECT
        ORDER_DATE,
        CUSTKEY,
        PARTKEY,
        SUPPKEY,
        ORDERKEY,
        ORDERTYPE,
        STORE_ID,
        EVENT_ID,
        LOCAL_PRICE,
        CUSTOMER_PRICE,
        LOCAL_DATETIME,
        CUSTOMER_DATETIME,
        ID_PLAZO_ENTREGA,
        TAX,
        QUANTITY,
        LINESTATUS,
        ORDER_STATUS,
        ORDER_PRIORITY,
        SHIP_DATE,
        RETURN_FLAG,
        COMMIT_DATE,
        RECEIPT_DATE
    FROM DAILY_SALES
    WHERE IS_NUMERIC(CUSTKEY) = TRUE
      AND IS_NUMERIC(PARTKEY) = TRUE
      AND IS_NUMERIC(SUPPKEY) = TRUE
      AND IS_NUMERIC(ORDERKEY) = TRUE
      AND IS_NUMERIC(LOCAL_PRICE) = TRUE
      AND IS_NUMERIC(CUSTOMER_PRICE) = TRUE
      AND IS_NUMERIC(ID_PLAZO_ENTREGA) = TRUE
      AND IS_NUMERIC(TAX) = TRUE
      AND IS_NUMERIC(QUANTITY) = TRUE;

    -- Crear la tabla limpia si no existe
    CREATE OR REPLACE TABLE CLEAN_DAILY_SALES AS
    SELECT *
    FROM TEMP_DAILY_SALES
    WHERE 1 = 0;

    -- Insertar datos limpios en la tabla CLEAN_DAILY_SALES
    INSERT INTO CLEAN_DAILY_SALES
    SELECT *
    FROM TEMP_DAILY_SALES;

    -- Eliminar la tabla temporal
    DROP TABLE TEMP_DAILY_SALES;
END;

-- Iniciar la Task
ALTER TASK transform_clean_data_task RESUME;

-- Crear Task para procesar las ventas diarias
CREATE OR REPLACE TASK populate_daily_sales_task
    WAREHOUSE = 'COMPUTE_WH'
    SCHEDULE = '60 MINUTE'
    SUSPEND_TASK_AFTER_NUM_FAILURES = 3
AS
BEGIN
    -- Insertar datos en DAILY_SALES
    INSERT INTO DAILY_SALES (
        ORDER_DATE, CUSTKEY, PARTKEY, SUPPKEY, ORDERKEY, ORDERTYPE,
        STORE_ID, EVENT_ID, LOCAL_PRICE, CUSTOMER_PRICE, LOCAL_DATETIME,
        CUSTOMER_DATETIME, ID_PLAZO_ENTREGA, TAX, QUANTITY, LINESTATUS,
        ORDER_STATUS, ORDER_PRIORITY, SHIP_DATE, RETURN_FLAG, COMMIT_DATE,
        RECEIPT_DATE
    )
    SELECT
        O.ORDER_DATE, O.C_CUSTKEY, L.P_PARTKEY, L.S_SUPPKEY, O.O_ORDERKEY, O.O_ORDERDATE,
        S.STORE_ID, E.EVENT_ID, L.L_EXTENDEDPRICE, L.L_EXTENDEDPRICE / L.L_QUANTITY,
        L.L_SHIPDATE, L.L_COMMITDATE, L.L_RECEIPTDATE, L.L_SHIPINSTRUCT, L.L_SHIPMODE,
        ID_PLAZO_ENTREGA, L.L_TAX, L.L_QUANTITY, L.L_LINESTATUS, O.O_ORDERSTATUS, O.O_ORDERPRIORITY,
        L.L_SHIPDATE, L.L_RETURNFLAG, L.L_COMMITDATE, L.L_RECEIPTDATE
    FROM ORDERS O
    JOIN LINEITEM L ON O.O_ORDERKEY = L.L_ORDERKEY
    JOIN STORE S ON S.NATION = L.L_SHIPINSTRUCT
    JOIN EVENT E ON E.EVENT_ID = O.O_CUSTKEY
    WHERE O.ORDER_DATE >= CURRENT_DATE - INTERVAL '30 DAY'
    AND L.L_SHIPDATE IS NOT NULL;
END;

-- Iniciar la Task
ALTER TASK populate_daily_sales_task RESUME;

-- Crear Task para actualizar los tiempos de entrega
CREATE OR REPLACE TASK update_delivery_times_task
    WAREHOUSE = 'COMPUTE_WH'
    SCHEDULE = '60 MINUTE'
    SUSPEND_TASK_AFTER_NUM_FAILURES = 3
AS
BEGIN
    -- Actualizar el campo ID_PLAZO_ENTREGA en DAILY_SALES según los nuevos criterios de plazos de entrega
    UPDATE DAILY_SALES
    SET ID_PLAZO_ENTREGA =
        CASE
            WHEN DATEDIFF(DAY, COMMIT_DATE, RECEIPT_DATE) > 30 THEN 0
            WHEN DATEDIFF(DAY, COMMIT_DATE, RECEIPT_DATE) <= 0 THEN 1
            WHEN DATEDIFF(DAY, COMMIT_DATE, RECEIPT_DATE) BETWEEN 1 AND 10 THEN 2
            WHEN DATEDIFF(DAY, COMMIT_DATE, RECEIPT_DATE) BETWEEN 11 AND 30 THEN 3
        END;
END;

-- Iniciar la Task
ALTER TASK update_delivery_times_task RESUME;

-- Crear Task para reprocesar completamente los tiempos de entrega
CREATE OR REPLACE TASK reprocess_delivery_times_task
    WAREHOUSE = 'COMPUTE_WH'
    SCHEDULE = 'USING CRON 0 0 * * * UTC' -- Se ejecutará diariamente a medianoche (ajustar según necesidad)
    SUSPEND_TASK_AFTER_NUM_FAILURES = 3
AS
BEGIN
    -- Actualizar el campo ID_PLAZO_ENTREGA en DAILY_SALES según los nuevos criterios de plazos de entrega
    UPDATE DAILY_SALES
    SET ID_PLAZO_ENTREGA =
        CASE
            WHEN DATEDIFF(DAY, COMMIT_DATE, RECEIPT_DATE) > 30 THEN 0
            WHEN DATEDIFF(DAY, COMMIT_DATE, RECEIPT_DATE) <= 0 THEN 1
            WHEN DATEDIFF(DAY, COMMIT_DATE, RECEIPT_DATE) BETWEEN 1 AND 10 THEN 2
            WHEN DATEDIFF(DAY, COMMIT_DATE, RECEIPT_DATE) BETWEEN 11 AND 30 THEN 3
        END;
END;

-- Iniciar la Task
ALTER TASK reprocess_delivery_times_task RESUME;
