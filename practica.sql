-- PARTE C
-- Creamos las tablas correspondientes
CREATE TABLE EVENT (
    EVENT_ID NUMBER(38,0) NOT NULL,
    START_DATE DATE NOT NULL,
    END_DATE DATE NOT NULL,
    NATION VARCHAR(25) NOT NULL CONSTRAINT NOT_EMPTY_NATION_EVENT CHECK(NATION <> ''),
    EVENT_NAME VARCHAR(40) NOT NULL CONSTRAINT NOT_EMPTY_EVENT_NAME_EVENT CHECK(EVENT_NAME <> ''),
    PRIMARY KEY (EVENT_ID)
);

CREATE TABLE ENTREGA(
    ID_PLAZO_ENTREGA INTEGER NOT NULL,
    DESCRIPCION VARCHAR(150) NOT NULL CONSTRAINT NOT_EMPTY_DESCRIPTION_ENTREGA CHECK(DESCRIPCION <> ''),
    PRIMARY KEY (ID_PLAZO_ENTREGA)
);

CREATE TABLE STORE(
    STORE_ID NUMBER(38,0) NOT NULL,
    NATION VARCHAR(25) NOT NULL CONSTRAINT NOT_EMPTY_NATION_STORE CHECK(NATION <> ''),
    NAME VARCHAR(20) NOT NULL CONSTRAINT NOT_EMPTY_NAME_STORE CHECK(NAME <> ''),
    ADDRESS VARCHAR(40) NOT NULL CONSTRAINT NOT_EMPTY_ADDRESS_STORE CHECK(ADDRESS <> ''),
    PRIMARY KEY (STORE_ID)
);

CREATE TABLE EXCHANGE_RATE (
    NATION VARCHAR(25) NOT NULL CONSTRAINT NOT_EMPTY_NATION_EXCHANGE_RATE CHECK(NATION <> ''),
    ORDER_DATE DATE NOT NULL,
    EXCHANGE_USD DECIMAL(38,2) NOT NULL,
    PRIMARY KEY (NATION, ORDER_DATE)
);

CREATE TABLE TIME_ZONE(
    NATION VARCHAR(25) NOT NULL CONSTRAINT NOT_EMPTY_NATION_TIME_ZONE CHECK(NATION <> ''),
    UTC TIMESTAMP_TZ NOT NULL,
    PRIMARY KEY (NATION)
);

CREATE TABLE DAILY_SALES(
    ORDER_DATE DATE NOT NULL,
    CUSTKEY NUMBER(38,0) NOT NULL,
    PARTKEY NUMBER(38,0) NOT NULL,
    SUPPKEY NUMBER(38,0) NOT NULL,
    ORDERKEY NUMBER(38,0) NOT NULL,
    ORDERTYPE ENUM('venta', 'devolucion') NOT NULL,
    STORE_ID NUMBER(38,0) NOT NULL,
    EVENT_ID NUMBER(38,0) NOT NULL,
    LOCAL_PRICE NUMBER(38,2) NOT NULL,
    CUSTOMER_PRICE NUMBER(38,2) NOT NULL,
    LOCAL_DATETIME TIMESTAMP_TZ NOT NULL,
    CUSTOMER_DATETIME TIMESTAMP_TZ NOT NULL,
    ID_PLAZO_ENTREGA NUMBER(38,0) NOT NULL,
    TAX NUMBER(12,2) NOT NULL,
    QUANTITY NUMBER(12,2) NOT NULL,
    LINENUMBER NUMBER(38,0) NOT NULL,
    LINESTATUS VARCHAR(1) NOT NULL CONSTRAINT NOT_EMPTY_LINESTATUS_DAILY_SALES CHECK(LINESTATUS <> ''),
    ORDER_STATUS VARCHAR(1) NOT NULL CONSTRAINT NOT_EMPTY_ORDER_STATUS_DAILY_SALES CHECK(ORDER_STATUS <> ''),
    ORDER_PRIORITY VARCHAR(15) NOT NULL CONSTRAINT NOT_EMPTY_ORDER_PRIORITY_DAILY_SALES CHECK(ORDER_PRIORITY <> ''),
    SHIP_DATE DATE NOT NULL,
    RETURN_FLAG VARCHAR(1) NOT NULL CONSTRAINT NOT_EMPTY_RETURN_FLAG_DAILY_SALES CHECK(RETURN_FLAG <> ''),
    COMMIT_DATE DATE NOT NULL,
    RECEIPT_DATE DATE NOT NULL,
    SHIP_INSTRUCT VARCHAR(25) NOT NULL CONSTRAINT NOT_EMPTY_SHIP_INSTRUCT_DAILY_SALES CHECK(ORDER_STATUS <> ''),
    SHIP_MODE VARCHAR(10) NOT NULL CONSTRAINT NOT_EMPTY_SHIP_MODE_DAILY_SALES CHECK(SHIP_MODE <> ''),
    CLERK NUMBER(38,0) NOT NULL,
    SHIP_PRIORITY NUMBER(38,0) NOT NULL,
    PRIMARY KEY (ORDER_DATE, ORDERKEY, PARTKEY, SUPPKEY, CUSTKEY)
);

-- Creamos una task para procesar las ventas diarias
CREATE TASK populate_daily_sales_task
    WAREHOUSE = 'COMPUTE_WH'
    SCHEDULE = '60 MINUTE'
    SUSPEND_TASK_AFTER_NUM_FAILURES = 3
AS
BEGIN
    INSERT INTO DAILY_SALES (
        ORDER_DATE, CUSTKEY, PARTKEY, SUPPKEY, ORDERKEY, ORDERTYPE,
        STORE_ID, EVENT_ID, LOCAL_PRICE, CUSTOMER_PRICE, LOCAL_DATETIME,
        CUSTOMER_DATETIME, ID_PLAZO_ENTREGA, TAX, QUANTITY, LINESTATUS,
        ORDER_STATUS, ORDER_PRIORITY, SHIP_DATE, RETURN_FLAG, COMMIT_DATE,
        RECEIPT_DATE, SHIP_INSTRUCT, SHIP_MODE, CLERK, SHIP_PRIORITY
    )
    SELECT
        O.ORDER_DATE, O.C_CUSTKEY, L.P_PARTKEY, L.S_SUPPKEY, O.O_ORDERKEY, O.O_ORDERSTATUS,
        S.STORE_ID, E.EVENT_ID, 
        L.L_EXTENDEDPRICE * ER_STORE.EXCHANGE_USD AS LOCAL_PRICE, 
        L.L_EXTENDEDPRICE * ER_CUSTOMER.EXCHANGE_USD AS CUSTOMER_PRICE,
        CONVERT_TZ(O.O_ORDERDATE, 'UTC', T_STORE.UTC) AS LOCAL_DATETIME,
        CONVERT_TZ(O.O_ORDERDATE, 'UTC', T_CUSTOMER.UTC) AS CUSTOMER_DATETIME,
        L.L_TASK, L.L_QUANTITY, L.L_LINESTATUS, O.O_ORDERSTATUS, O.O_ORDERPRIORITY, L.L_SHIPDATE, L.L_RETURNFLAG, L.L_COMMITDATE, L.L_RECEIPTDATE,
        L.L_SHIPINSTRUCT, L.L_SHIPMODE, CAST(REGEXP_SUBSTR(O.O_CLERK, '[0-9]+') AS UNSIGNED), O.O_SHIPPRIORITY
    FROM ORDERS O
    JOIN LINEITEM L ON O.O_ORDERKEY = L.L_ORDERKEY
    JOIN STORE S ON S.NATION = L.L_SHIPINSTRUCT
    JOIN EVENT E ON O.ORDER_DATE BETWEEN E.START_DATE AND E.END_DATE AND S.NATION = E.NATION
    JOIN EXCHANGE_RATE ER_STORE ON S.NATION = ER_STORE.NATION AND O.ORDER_DATE = ER_STORE.ORDER_DATE
    JOIN EXCHANGE_RATE ER_CUSTOMER ON O.C_CUSTKEY = ER_CUSTOMER.NATION AND O.ORDER_DATE = ER_CUSTOMER.ORDER_DATE
    JOIN TIME_ZONE T_STORE ON S.NATION = T_STORE.NATION
    JOIN TIME_ZONE T_CUSTOMER ON O.C_CUSTKEY = T_CUSTOMER.NATION
    WHERE O.ORDER_DATE >= CURRENT_DATE - INTERVAL '30 DAY'
    AND L.L_SHIPDATE IS NOT NULL;
end
;

-- Iniciamos la task anterior
ALTER TASK populate_daily_sales_task RESUME;

-- Crearmos una task para actualizar los tiempos de entrega
CREATE TASK update_delivery_times_task
    WAREHOUSE = 'COMPUTE_WH'
    SCHEDULE = '60 MINUTE'
    SUSPEND_TASK_AFTER_NUM_FAILURES = 3
AS
BEGIN
    -- Actualizar el campo ID_PLAZO_ENTREGA
    UPDATE DAILY_SALES
    SET ID_PLAZO_ENTREGA =
        CASE
            WHEN DATEDIFF(DAY, COMMIT_DATE, RECEIPT_DATE) > 30 THEN 0
            WHEN DATEDIFF(DAY, COMMIT_DATE, RECEIPT_DATE) <= 0 THEN 1
            WHEN DATEDIFF(DAY, COMMIT_DATE, RECEIPT_DATE) BETWEEN 1 AND 10 THEN 2
            WHEN DATEDIFF(DAY, COMMIT_DATE, RECEIPT_DATE) BETWEEN 11 AND 30 THEN 3
        END;
end
;

-- Iniciamos la task anterior
ALTER TASK update_delivery_times_task RESUME;

-- Crermos la task para reprocesar completamente los plazos de entrega
CREATE TASK reprocess_delivery_times_task
    WAREHOUSE = 'COMPUTE_WH'
    SCHEDULE = '1 DAY'
    SUSPEND_TASK_AFTER_NUM_FAILURES = 3
AS
BEGIN
    -- Actualizar el campo ID_PLAZO_ENTREGA
    UPDATE DAILY_SALES
    SET ID_PLAZO_ENTREGA =
        CASE
            WHEN DATEDIFF(DAY, COMMIT_DATE, RECEIPT_DATE) > 30 THEN 0
            WHEN DATEDIFF(DAY, COMMIT_DATE, RECEIPT_DATE) <= 0 THEN 1
            WHEN DATEDIFF(DAY, COMMIT_DATE, RECEIPT_DATE) BETWEEN 1 AND 10 THEN 2
            WHEN DATEDIFF(DAY, COMMIT_DATE, RECEIPT_DATE) BETWEEN 11 AND 30 THEN 3
        END;
end
;

-- Iniciamos la task anterior
ALTER TASK reprocess_delivery_times_task RESUME;
